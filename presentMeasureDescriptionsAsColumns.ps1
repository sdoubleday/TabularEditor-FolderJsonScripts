PARAM(
    [ValidateNotNullorEmpty()][ValidateScript({
                IF (Test-Path -PathType Container -Path $_ ) 
                    {$True}
                ELSE {
                    Throw "$_ is not a Directory."
                } 
            })][String]$tabularEditorFolderRoot
    ,[ValidateNotNullorEmpty()][String]$DocumentationFolderName = "zz_Documentation"
)
BEGIN{

}
PROCESS{
    Remove-Item -Recurse $tabularEditorFolderRoot\tables\$DocumentationFolderName;
    $listOfTables = Get-ChildItem $tabularEditorFolderRoot\tables;


    #region recreate documentation table
    New-Item -ItemType Directory $tabularEditorFolderRoot\tables\$DocumentationFolderName | Out-Null;
    New-Item -ItemType File $tabularEditorFolderRoot\tables\$DocumentationFolderName\.gitignore | Add-Content -Encoding UTF8 -Value "*"; #We should rebuild the documentation table with every publish based on the contents of other description fields.
    New-Item -ItemType Directory $tabularEditorFolderRoot\tables\$DocumentationFolderName\partitions | Out-Null;
    New-Item -ItemType Directory $tabularEditorFolderRoot\tables\$DocumentationFolderName\columns | Out-Null;

    $template = [PSCustomObject] @{
        name = "$DocumentationFolderName";
        description = "Autogenerated Documentation Table"
    };
    New-Item -Force -ItemType File $tabularEditorFolderRoot\tables\$DocumentationFolderName\$($template.name).json | Add-Content -Encoding UTF8 -Value $( $template | ConvertTo-Json ) ;

    $template = [PSCustomObject] @{
        name = "partition1";
        mode = "import";
        source = [PSCustomObject] @{
            type = "calculated";
            expression = 'ROW ( "Purpose", "Ad-hoc design-time access to SSAS column documentation")';
         }
    };
    New-Item -Force -ItemType File $tabularEditorFolderRoot\tables\$DocumentationFolderName\partitions\$($template.name).json | Add-Content -Encoding UTF8 -Value $( $template | ConvertTo-Json ) ;

    $template = [PSCustomObject] @{
        type = "calculated";
        name = "DocKey";
        dataType = "int64";
        isHidden = $true;
        expression = "1";
        displayFolder = "SurrogateKeys"
    };
    New-Item -Force -ItemType File $tabularEditorFolderRoot\tables\$DocumentationFolderName\columns\$($template.name).json | Add-Content -Encoding UTF8 -Value $( $template | ConvertTo-Json ) ;

    #endregion

    $listOfTables | ForEach-Object {
        $thisTablePath = $_.FullName;
        $thisTable = $_.BaseName;
        Get-ChildItem $thisTablePath -Directory | Get-ChildItem -exclude partitions | ForEach-Object {
            $json = Get-Content $_.FullName | ConvertFrom-Json ;
            $template = [PSCustomObject] @{
                type = 'calculated';
                name = "$($json.name) - ABOUT";
                dataType = 'string';
                description = "Autogenerated Documentation Column.";
                expression = """" + $($json.name) + " - DESCRIPTION - " + $( $($json.description) -replace '"', '""' ) + "; EXPRESSION - " + $( $($json.expression) -replace '"', '""' ) + """";
                displayFolder = "$($thisTable)\$($_.Directory.BaseName)$(if ( $json.displayFolder -notlike $null ) { "\$($json.displayFolder)" } )"
            };
            New-Item -Force -ItemType File $tabularEditorFolderRoot\tables\$DocumentationFolderName\columns\$($template.name).json | Add-Content -Encoding UTF8 -Value $( $template | ConvertTo-Json ) ;
        }
    }
}
END{}
